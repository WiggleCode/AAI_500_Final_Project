# from sklearn.ensemble import GradientBoostingClassifier

# from sklearn.metrics import accuracy_score, classification_report


## Gradient Boosting - DRAFT ##

# Encode churn column as binary
train_df["churn_encoded"] = train_df["churn"].map({"no": 0, "yes": 1})

# Features (predictors)
X = train_df[['total_day_minutes', 'total_eve_minutes', 'total_night_minutes',
              'total_intl_minutes', 'total_day_calls', 'total_eve_calls',
              'total_night_calls', 'number_customer_service_calls']]

# Target of what we are trying to predict 
y = train_df['churn_encoded']  # Targetting the 1:0 yes:no frame

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize model function 
gb = GradientBoostingClassifier(n_estimators=10000, learning_rate=0.1, max_depth=3, random_state=42)

# Training the data
gb.fit(X_train, y_train)

# Predict
y_pred = gb.predict(X_test)

# Evaluate
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))


importances = gb.feature_importances_
plt.barh(X.columns, importances)
plt.xlabel("Feature Importance")
plt.ylabel("Features")
plt.title("Gradient Boosting Feature Importance")
plt.show()
